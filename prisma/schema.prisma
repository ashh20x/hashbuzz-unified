generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account_emailaddress {
  id                        Int                         @id @default(autoincrement())
  email                     String                      @unique @db.VarChar(254)
  verified                  Boolean
  primary                   Boolean
  user_id                   BigInt
  user_user                 user_user                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_emailaddress_user_id_2c513194_fk_user_user_id")
  account_emailconfirmation account_emailconfirmation[]

  @@index([email], map: "account_emailaddress_email_03be32b2_like")
  @@index([user_id], map: "account_emailaddress_user_id_2c513194")
}

model account_emailconfirmation {
  id                   Int                  @id @default(autoincrement())
  created              DateTime             @db.Timestamptz(6)
  sent                 DateTime?            @db.Timestamptz(6)
  key                  String               @unique @db.VarChar(64)
  email_address_id     Int
  account_emailaddress account_emailaddress @relation(fields: [email_address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_emailconfirm_email_address_id_5b7f8c58_fk_account_e")

  @@index([email_address_id], map: "account_emailconfirmation_email_address_id_5b7f8c58")
  @@index([key], map: "account_emailconfirmation_key_f43612bd_like")
}

model auth_group {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique @db.VarChar(150)
  auth_group_permissions auth_group_permissions[]
  user_user_groups       user_user_groups[]

  @@index([name], map: "auth_group_name_a6ea08ec_like")
}

model auth_group_permissions {
  id              BigInt          @id @default(autoincrement())
  group_id        Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
  auth_group      auth_group      @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissions_group_id_b120cbf9_fk_auth_group_id")

  @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([group_id], map: "auth_group_permissions_group_id_b120cbf9")
  @@index([permission_id], map: "auth_group_permissions_permission_id_84c5c92e")
}

model auth_permission {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  content_type_id            Int
  codename                   String                       @db.VarChar(100)
  auth_group_permissions     auth_group_permissions[]
  django_content_type        django_content_type          @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_permission_content_type_id_2f476e4b_fk_django_co")
  user_user_user_permissions user_user_user_permissions[]

  @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
  @@index([content_type_id], map: "auth_permission_content_type_id_2f476e4b")
}

model authtoken_token {
  key       String    @id @db.VarChar(500)
  created   DateTime  @db.Timestamptz(6)
  user_id   BigInt    @unique
  user_user user_user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "authtoken_token_user_id_35299eff_fk_user_user_id")

  @@index([key], map: "authtoken_token_key_10f0b77e_like")
}

model campaign_media {
  id               BigInt     @id @default(autoincrement())
  media_type       String?    @db.VarChar(255)
  media_file       String?    @db.VarChar(100)
  twitter_media_id String?    @db.VarChar(50)
  owner_id         BigInt?
  user_user        user_user? @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaign_media_owner_id_76524538_fk_user_user_id")

  @@index([owner_id], map: "campaign_media_owner_id_76524538")
}

model campaign_participation {
  id                   BigInt               @id @default(autoincrement())
  user_handle          String               @db.VarChar(100)
  action               String               @db.VarChar(50)
  twitter_card_id      BigInt
  campaign_twittercard campaign_twittercard @relation(fields: [twitter_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaign_participati_twitter_card_id_821a43bf_fk_campaign_")

  @@index([twitter_card_id], map: "campaign_participation_twitter_card_id_821a43bf")
}

model campaign_tweetengagements {
  id              BigInt         @id @default(autoincrement())
  user_id         String?        @db.VarChar(50)
  tweet_id        String?        @db.VarChar(50)
  engagement_type String         @db.VarChar(50)
  updated_at      DateTime?      @db.Timestamptz(6)
  exprired_at     DateTime?      @db.Timestamptz(6)
  payment_status  payment_status @default(UNPAID)
}

model campaign_tweetstats {
  id                   BigInt               @id @default(autoincrement())
  retweet_count        Int?
  reply_count          Int?
  like_count           Int?
  quote_count          Int?
  last_update          DateTime             @db.Timestamptz(6)
  twitter_card_id      BigInt               @unique(map: "campaign_tweetstats_twitter_card_id_bc9e4862_uniq")
  campaign_twittercard campaign_twittercard @relation(fields: [twitter_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaign_tweetstats_twitter_card_id_bc9e4862_fk_campaign_")
}

model campaign_twittercard {
  id                     BigInt                   @id @default(autoincrement())
  tweet_id               String?                  @db.VarChar(50)
  tweet_text             String?                  @db.VarChar(300)
  retweet_reward         Float?
  like_reward            Float?
  quote_reward           Float?
  comment_reward         Float?
  media                  String[]                 @db.VarChar(20)
  amount_claimed         Float?
  amount_spent           Float                    @default(0)
  name                   String?                  @db.VarChar(50)
  owner_id               BigInt?
  card_status            String                   @db.VarChar(50)
  campaign_budget        Float?
  campaign_expiry        DateTime?                @db.Timestamptz(6)
  last_reply_checkedAt   DateTime?                @default(now()) @db.Timestamptz(6)
  contract_id            String?                  @db.Char(20)
  last_thread_tweet_id   String?                  @db.VarChar
  campaign_participation campaign_participation[]
  campaign_tweetstats    campaign_tweetstats?
  user_user              user_user?               @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaign_twittercard_owner_id_90f418c7_fk_user_user_id")

  @@index([owner_id], map: "campaign_twittercard_owner_id_90f418c7")
}

model django_admin_log {
  id                  Int                  @id @default(autoincrement())
  action_time         DateTime             @db.Timestamptz(6)
  object_id           String?
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.SmallInt
  change_message      String
  content_type_id     Int?
  user_id             BigInt
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  user_user           user_user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_user_id_c564eba6_fk_user_user_id")

  @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb")
  @@index([user_id], map: "django_admin_log_user_id_c564eba6")
}

model django_content_type {
  id               Int                @id @default(autoincrement())
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.Timestamptz(6)
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String
  expire_date  DateTime @db.Timestamptz(6)

  @@index([expire_date], map: "django_session_expire_date_a5c62663")
  @@index([session_key], map: "django_session_session_key_c0390e0f_like")
}

model socialaccount_socialaccount {
  id                        Int                         @id @default(autoincrement())
  provider                  String                      @db.VarChar(30)
  uid                       String                      @db.VarChar(191)
  last_login                DateTime                    @db.Timestamptz(6)
  date_joined               DateTime                    @db.Timestamptz(6)
  extra_data                String
  user_id                   BigInt
  user_user                 user_user                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "socialaccount_socialaccount_user_id_8146e70c_fk_user_user_id")
  socialaccount_socialtoken socialaccount_socialtoken[]

  @@unique([provider, uid], map: "socialaccount_socialaccount_provider_uid_fc810c6e_uniq")
  @@index([user_id], map: "socialaccount_socialaccount_user_id_8146e70c")
}

model socialaccount_socialapp {
  id                        Int                         @id @default(autoincrement())
  provider                  String                      @db.VarChar(30)
  name                      String                      @db.VarChar(40)
  client_id                 String                      @db.VarChar(191)
  secret                    String                      @db.VarChar(191)
  key                       String                      @db.VarChar(191)
  socialaccount_socialtoken socialaccount_socialtoken[]
}

model socialaccount_socialtoken {
  id                          Int                         @id @default(autoincrement())
  token                       String
  token_secret                String
  expires_at                  DateTime?                   @db.Timestamptz(6)
  account_id                  Int
  app_id                      Int
  socialaccount_socialaccount socialaccount_socialaccount @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "socialaccount_social_account_id_951f210e_fk_socialacc")
  socialaccount_socialapp     socialaccount_socialapp     @relation(fields: [app_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "socialaccount_social_app_id_636a42d7_fk_socialacc")

  @@unique([app_id, account_id], map: "socialaccount_socialtoken_app_id_account_id_fca4e0ac_uniq")
  @@index([account_id], map: "socialaccount_socialtoken_account_id_951f210e")
  @@index([app_id], map: "socialaccount_socialtoken_app_id_636a42d7")
}

model user_twitterlogintemp {
  id                       BigInt     @id @default(autoincrement())
  oauth_token              String?    @db.VarChar(100)
  oauth_token_secret       String?    @db.VarChar(100)
  oauth_callback_confirmed Boolean?
  created_at               DateTime?  @db.Timestamptz(6)
  updated_at               DateTime?  @db.Timestamptz(6)
  business_owner_id        BigInt?
  user_user                user_user? @relation(fields: [business_owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_twitterlogintem_business_owner_id_85bb51b5_fk_user_user")

  @@index([business_owner_id], map: "user_twitterlogintemp_business_owner_id_85bb51b5")
}

model user_user {
  id                                   BigInt                        @id @default(autoincrement())
  password                             String                        @db.VarChar(128)
  last_login                           DateTime?                     @db.Timestamptz(6)
  is_superuser                         Boolean
  username                             String                        @unique @db.VarChar(150)
  first_name                           String                        @db.VarChar(150)
  last_name                            String                        @db.VarChar(150)
  email                                String                        @db.VarChar(254)
  is_staff                             Boolean
  is_active                            Boolean
  date_joined                          DateTime                      @db.Timestamptz(6)
  personal_twitter_handle              String?                       @db.VarChar(50)
  business_twitter_handle              String?                       @db.VarChar(50)
  hedera_wallet_id                     String?                       @db.VarChar(50)
  consent                              Boolean?
  available_budget                     Float                         @default(0)
  twitter_access_token                 String?                       @db.VarChar(200)
  twitter_access_token_secret          String?                       @db.VarChar(200)
  business_twitter_access_token        String?                       @db.VarChar(200)
  business_twitter_access_token_secret String?                       @db.VarChar(200)
  personal_twitter_id                  String?                       @db.VarChar(50)
  total_rewarded                       Float                         @default(0)
  account_emailaddress                 account_emailaddress[]
  authtoken_token                      authtoken_token?
  campaign_media                       campaign_media[]
  campaign_twittercard                 campaign_twittercard[]
  django_admin_log                     django_admin_log[]
  socialaccount_socialaccount          socialaccount_socialaccount[]
  user_twitterlogintemp                user_twitterlogintemp[]
  user_user_groups                     user_user_groups[]
  user_user_user_permissions           user_user_user_permissions[]

  @@unique([id, username])
  @@index([username], map: "user_user_username_e2bdfe0c_like")
}

model user_user_groups {
  id         BigInt     @id @default(autoincrement())
  user_id    BigInt
  group_id   Int
  auth_group auth_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_user_groups_group_id_c57f13c0_fk_auth_group_id")
  user_user  user_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_user_groups_user_id_13f9a20d_fk_user_user_id")

  @@unique([user_id, group_id], map: "user_user_groups_user_id_group_id_bb60391f_uniq")
  @@index([group_id], map: "user_user_groups_group_id_c57f13c0")
  @@index([user_id], map: "user_user_groups_user_id_13f9a20d")
}

model user_user_user_permissions {
  id              BigInt          @id @default(autoincrement())
  user_id         BigInt
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_user_user_permi_permission_id_ce49d4de_fk_auth_perm")
  user_user       user_user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_user_user_permissions_user_id_31782f58_fk_user_user_id")

  @@unique([user_id, permission_id], map: "user_user_user_permissions_user_id_permission_id_64f4d5b8_uniq")
  @@index([permission_id], map: "user_user_user_permissions_permission_id_ce49d4de")
  @@index([user_id], map: "user_user_user_permissions_user_id_31782f58")
}

model smartcontracts {
  id              BigInt    @id @default(autoincrement())
  contract_id     String    @db.VarChar(50)
  is_active       Boolean   @default(true)
  network         network?
  created_at      DateTime? @db.Timestamptz(6)
  contractAddress String    @db.VarChar(150)
  fileId          String    @db.VarChar(50)

  @@unique([id, contract_id])
}

enum network {
  testnet
  mainnet
  previewnet
}

enum transactionType {
  topup
  reimburse
}

enum payment_status {
  PAID
  UNPAID
}
