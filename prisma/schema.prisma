generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model authtoken_token {
  key            String   @db.VarChar(1000)
  created        DateTime @default(now()) @db.Timestamptz(6)
  accountAddress String   @unique
  expiry         DateTime @db.Timestamptz(6)

  @@index([accountAddress])
}

model campaign_media {
  id               BigInt     @id @default(autoincrement())
  media_type       String?    @db.VarChar(255)
  media_file       String?    @db.VarChar(100)
  twitter_media_id String?    @db.VarChar(50)
  owner_id         BigInt?
  user_user        user_user? @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaign_media_owner_id_76524538_fk_user_user_id")

  @@index([owner_id], map: "campaign_media_owner_id_76524538")
}

model campaign_participation {
  id                   BigInt               @id @default(autoincrement())
  user_handle          String               @db.VarChar(100)
  action               String               @db.VarChar(50)
  twitter_card_id      BigInt
  campaign_twittercard campaign_twittercard @relation(fields: [twitter_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaign_participati_twitter_card_id_821a43bf_fk_campaign_")

  @@index([twitter_card_id], map: "campaign_participation_twitter_card_id_821a43bf")
}

model campaign_tweetengagements {
  id              BigInt         @id @default(autoincrement())
  user_id         String?        @db.VarChar(50)
  tweet_id        String?        @db.VarChar(50)
  engagement_type String         @db.VarChar(50)
  updated_at      DateTime?      @db.Timestamptz(6)
  exprired_at     DateTime?      @db.Timestamptz(6)
  payment_status  payment_status @default(UNPAID)
}

model campaign_tweetstats {
  id                   BigInt               @id @default(autoincrement())
  retweet_count        Int?
  reply_count          Int?
  like_count           Int?
  quote_count          Int?
  last_update          DateTime             @db.Timestamptz(6)
  twitter_card_id      BigInt               @unique(map: "campaign_tweetstats_twitter_card_id_bc9e4862_uniq")
  campaign_twittercard campaign_twittercard @relation(fields: [twitter_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaign_tweetstats_twitter_card_id_bc9e4862_fk_campaign_")
}

model campaign_twittercard {
  id                     BigInt                   @id @default(autoincrement())
  tweet_id               String?                  @db.VarChar(50)
  tweet_text             String?                  @db.VarChar(300)
  retweet_reward         Float?
  like_reward            Float?
  quote_reward           Float?
  comment_reward         Float?
  media                  String[]                 @db.VarChar(20)
  amount_claimed         Float?
  amount_spent           Float                    @default(0)
  name                   String?                  @db.VarChar(50)
  owner_id               BigInt?
  card_status            String                   @db.VarChar(50)
  campaign_budget        Float?
  campaign_expiry        DateTime?                @db.Timestamptz(6)
  last_reply_checkedAt   DateTime?                @default(now()) @db.Timestamptz(6)
  contract_id            String?                  @db.Char(20)
  last_thread_tweet_id   String?                  @db.VarChar
  campaign_participation campaign_participation[]
  campaign_tweetstats    campaign_tweetstats?
  user_user              user_user?               @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaign_twittercard_owner_id_90f418c7_fk_user_user_id")

  @@index([owner_id], map: "campaign_twittercard_owner_id_90f418c7")
}

model user_twitterlogintemp {
  id                       BigInt    @id @default(autoincrement())
  oauth_token              String?   @db.VarChar(2000)
  oauth_token_secret       String?   @db.VarChar(2000)
  oauth_callback_confirmed Boolean?
  created_at               DateTime? @db.Timestamptz(6)
  updated_at               DateTime? @db.Timestamptz(6)
  user_id                  BigInt
  user_user                user_user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_twitterlogintem_business_owner_id_85bb51b5_fk_user_user")

  @@index([user_id], map: "user_twitterlogintemp_business_owner_id_85bb51b5")
}

model user_user {
  id                                   BigInt                  @id @default(autoincrement())
  accountAddress                       String                  @unique
  last_login                           DateTime?               @db.Timestamptz(6)
  name                                 String?                 @default("") @db.VarChar
  profile_image_url                    String                  @default("") @db.VarChar
  is_active                            Boolean
  date_joined                          DateTime                @default(now()) @db.Timestamptz(6)
  personal_twitter_handle              String?                 @db.VarChar(50)
  business_twitter_handle              String?                 @db.VarChar(50)
  consent                              Boolean                 @default(false)
  available_budget                     Float                   @default(0)
  twitter_access_token                 String?                 @db.VarChar(2000)
  twitter_access_token_secret          String?                 @db.VarChar(2000)
  business_twitter_access_token        String?                 @db.VarChar(2000)
  business_twitter_access_token_secret String?                 @db.VarChar(2000)
  personal_twitter_id                  String?                 @db.VarChar(50)
  total_rewarded                       Float                   @default(0)
  role                                 user_roles              @default(GUEST_USER)
  hash                                 String?                 @db.VarChar
  salt                                 String?                 @db.VarChar
  hedera_wallet_id                     String                  @unique
  campaign_media                       campaign_media[]
  campaign_twittercard                 campaign_twittercard[]
  user_balances                        user_balances[]
  user_twitterlogintemp                user_twitterlogintemp[]
  whiteListedTokens                    whiteListedTokens[]

  @@unique([id, hedera_wallet_id, accountAddress])
}

model smartcontracts {
  id                BigInt              @id @default(autoincrement())
  contract_id       String              @unique @db.VarChar(50)
  logicalContract_id String              @db.VarChar(50)
  lcFileID             String              @db.VarChar(50)
  is_active         Boolean             @default(true)
  network           network?
  created_at        DateTime?           @db.Timestamptz(6)
  contractAddress   String              @db.VarChar(150)
  fileId            String              @db.VarChar(50)
  whiteListedTokens whiteListedTokens[]

  @@unique([id, contract_id])
}

model whiteListedTokens {
  id             BigInt          @id @default(autoincrement())
  token_id       String          @unique @db.VarChar(20)
  name           String          @default("") @db.VarChar
  token_symbol   String          @default("‚Ñè") @db.VarChar
  added_by       BigInt
  contract_id    String          @db.VarChar(50)
  tokendata      Json?           @db.Json
  created_at     DateTime        @default(now()) @db.Timestamptz(6)
  token_type     String          @db.VarChar
  user_balances  user_balances[]
  user_user      user_user       @relation(fields: [added_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  smartcontracts smartcontracts  @relation(fields: [contract_id], references: [contract_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([token_id])
}

model user_balances {
  id                BigInt            @id @default(autoincrement())
  user_id           BigInt
  token_id          BigInt
  entity_decimal    Int
  entity_balance    Float             @default(0)
  created_at        DateTime          @default(now()) @db.Timestamptz(6)
  updated_at        DateTime          @default(now()) @db.Timestamptz(6)
  whiteListedTokens whiteListedTokens @relation(fields: [token_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_user         user_user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model transactions {
  id               BigInt          @id @default(autoincrement())
  transaction_id   String          @db.VarChar
  transaction_type transactionType
  network          network
  amount           Float
  status           String          @db.VarChar
  transaction_data Json            @db.JsonB
  created_at       DateTime        @default(now()) @db.Timestamptz(6)
}

enum network {
  testnet
  mainnet
  previewnet
}

enum transactionType {
  topup
  reimburse
  campaign_top_up
  reward
}

enum payment_status {
  PAID
  UNPAID
}

enum user_roles {
  SUPER_ADMIN
  ADMIN
  ANALYTICS
  MARKETING
  MANAGEMENT
  USER
  GUEST_USER
}
