# =============================================================================
# HASHBUZZ FRONTEND PRE-PUSH HOOK
# =============================================================================
# Additional checks before pushing to remote repository

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo "${BLUE}🔍 [PRE-PUSH]${NC} $1"
}

print_success() {
    echo "${GREEN}✅ [PRE-PUSH]${NC} $1"
}

print_warning() {
    echo "${YELLOW}⚠️  [PRE-PUSH]${NC} $1"
}

print_error() {
    echo "${RED}❌ [PRE-PUSH]${NC} $1"
}

protected_branch='main'
current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

print_status "Starting pre-push checks for branch: $current_branch"

# Skip checks for certain branches (like dependabot)
if echo "$current_branch" | grep -qE "^(dependabot|renovate)/"; then
    print_warning "Automated branch detected. Skipping some checks."
    exit 0
fi

# Extra protection for main branch
if [ "$current_branch" = "$protected_branch" ]; then
    print_warning "Pushing to protected branch '$protected_branch'"
    print_status "Running comprehensive checks..."

    # Full type check
    print_status "Running complete TypeScript check..."
    if ! yarn type-check; then
        print_error "TypeScript check failed! Cannot push to $protected_branch with type errors."
        exit 1
    fi

    # Full lint check (temporarily disabled)
    # print_status "Running complete ESLint check..."
    # if ! yarn lint --max-warnings 0; then
    #     print_error "ESLint check failed! Cannot push to $protected_branch with lint errors."
    #     exit 1
    # fi

    # Build check
    print_status "Testing production build..."
    if ! yarn build; then
        print_error "Production build failed! Cannot push to $protected_branch."
        exit 1
    fi

    print_success "All protection checks passed for $protected_branch"
fi

# Check for secrets in recent commits
print_status "Checking recent commits for potential secrets..."
recent_commits=$(git log --oneline -n 5 --pretty=format:"%h %s")
if echo "$recent_commits" | grep -qiE "(password|secret|key|token|api_key)"; then
    print_warning "Recent commit messages mention sensitive terms:"
    echo "$recent_commits" | grep -iE "(password|secret|key|token|api_key)" | sed 's/^/  - /'
    print_warning "Please ensure no actual secrets are being committed."
fi

# Check commit message quality for recent commits
print_status "Checking recent commit message quality..."
recent_commit_msgs=$(git log --oneline -n 3 --pretty=format:"%s")
unconventional_commits=$(echo "$recent_commit_msgs" | grep -vE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: " || true)

if [ -n "$unconventional_commits" ]; then
    print_warning "Some recent commits don't follow conventional format:"
    echo "$unconventional_commits" | sed 's/^/  - /'
    print_warning "Consider using conventional commit messages for better changelog generation."
fi

# Check for TODO/FIXME in modified files
print_status "Checking for TODO/FIXME comments in recent changes..."
modified_files=$(git diff HEAD~1 --name-only --diff-filter=M | grep -E '\.(ts|tsx|js|jsx)$' || true)
if [ -n "$modified_files" ]; then
    todo_files=$(echo "$modified_files" | xargs grep -l "TODO\|FIXME\|XXX\|HACK" 2>/dev/null || true)
    if [ -n "$todo_files" ]; then
        print_warning "Modified files contain TODO/FIXME comments:"
        echo "$todo_files" | sed 's/^/  - /'
    fi
fi

# Final success
print_success "Pre-push checks completed successfully!"
print_status "Push is allowed to proceed."

exit 0
