# =============================================================================
# HASHBUZZ DAPP BACKEND - ULTRA-MINIMAL DOCKERFILE
# =============================================================================
# Distroless production build for maximum size optimization
# Target: <150MB final image size

# =============================================================================
# Stage 1: Build Environment
# =============================================================================
FROM node:22-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Copy and install dependencies
COPY package*.json ./
COPY prisma/ ./prisma/
RUN npm ci --no-audit --no-fund

# Copy source and build
COPY . .
RUN npx prisma generate \
    && npm run build

# Clean and optimize
RUN npm prune --omit=dev --omit=optional \
    && npm cache clean --force \
    && rm -rf /root/.npm /tmp/* \
    && find node_modules -name "*.md" -delete \
    && find node_modules -name "test" -type d -exec rm -rf {} + 2>/dev/null || true \
    && find node_modules -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true \
    && find node_modules -name "*.map" -delete

# =============================================================================
# Stage 2: Ultra-Minimal Production (Distroless)
# =============================================================================
FROM gcr.io/distroless/nodejs22-debian12:nonroot AS production

# Copy application from builder
COPY --from=builder --chown=nonroot:nonroot /app/dist /app/dist
COPY --from=builder --chown=nonroot:nonroot /app/node_modules /app/node_modules
COPY --from=builder --chown=nonroot:nonroot /app/package.json /app/package.json
COPY --from=builder --chown=nonroot:nonroot /app/prisma/schema.prisma /app/prisma/schema.prisma

# Set working directory
WORKDIR /app

# Expose port
EXPOSE 4000

# Start application
CMD ["dist/index.js"]
